generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  fullName    String
  email       String   @unique
  passwordHash String
  role        Role
  createdAt   DateTime @default(now())

  proposals   Proposal[]
  notifications Notification[]
}

enum Role {
  RESEARCHER
  ADMIN
}

model CallForProposal {
  id          String   @id @default(uuid())
  title       String
  description String
  deadline    DateTime
  createdBy   String?
  createdAt   DateTime @default(now())

  proposals   Proposal[]
}

model Proposal {
  id              String   @id @default(uuid())
  researcherId    String
  researcher      User     @relation(fields: [researcherId], references: [id], onDelete: Cascade)
  callId          String
  call            CallForProposal @relation(fields: [callId], references: [id], onDelete: Cascade)
  title           String
  abstract        String
  documentUrl     String
  status          ProposalStatus @default(SUBMITTED)
  rejectionReason String?
  createdAt       DateTime @default(now())

  revisions       ProposalRevision[]
}

enum ProposalStatus {
  SUBMITTED
  UNDER_REVIEW
  REVISION_REQUESTED
  ACCEPTED
  REJECTED
}

model ProposalRevision {
  id                String   @id @default(uuid())
  proposalId        String
  proposal          Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  revisedDocumentUrl String
  comments          String?
  submittedAt       DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

